// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import "openzeppelin-contracts/contracts/access/Ownable.sol";

contract AssetsVault is Ownable {
    // L∆∞u tr·ªØ s·ªë d∆∞ ERC-20 c·ªßa m·ªói user
    mapping(address => mapping(address => uint256)) public tokenBalances;

    // L∆∞u tr·ªØ danh s√°ch NFT m√† user ƒë√£ n·∫°p
    mapping(address => mapping(address => uint256[])) private userNFTs;

    // üìå Danh s√°ch token ERC-20 ƒë∆∞·ª£c h·ªó tr·ª£
    address[] private supportedTokens;

    // ================== ERC-20 FUNCTIONS ==================
    
    // ‚úÖ N·∫°p token v√†o contract
    function depositToken(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);
        tokenBalances[msg.sender][token] += amount;

        emit TokenDeposited(msg.sender, token, amount);
    }

    // ‚úÖ R√∫t token kh·ªèi contract
    function withdrawToken(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(tokenBalances[msg.sender][token] >= amount, "Insufficient balance");

        tokenBalances[msg.sender][token] -= amount;
        IERC20(token).transfer(msg.sender, amount);

        emit TokenWithdrawn(msg.sender, token, amount);
    }

    // ‚úÖ L·∫•y s·ªë d∆∞ token c·ªßa user ƒë·ªëi v·ªõi m·ªôt lo·∫°i token c·ª• th·ªÉ
    function getUserTokenBalance(address user, address token) external view returns (uint256) {
        return tokenBalances[user][token];
    }

    // ‚úÖ Th√™m token ERC-20 v√†o danh s√°ch h·ªó tr·ª£ (ch·ªâ admin)
    function addSupportedToken(address token) external onlyOwner {
        supportedTokens.push(token);
    }

    // ‚úÖ L·∫•y danh s√°ch token ERC-20 ƒë∆∞·ª£c h·ªó tr·ª£
    function getAllSupportedTokens() public view returns (address[] memory) {
        return supportedTokens;
    }

    // ================== NFT FUNCTIONS ==================

    // ‚úÖ N·∫°p NFT v√†o contract
    function depositNFT(address nftContract, uint256 tokenId) external {
        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);
        userNFTs[msg.sender][nftContract].push(tokenId);

        emit NFTDeposited(msg.sender, nftContract, tokenId);
    }

    // ‚úÖ R√∫t NFT kh·ªèi contract
    function withdrawNFT(address nftContract, uint256 tokenId) external {
        require(_isNFTDeposited(msg.sender, nftContract, tokenId), "NFT not deposited");

        _removeNFT(msg.sender, nftContract, tokenId);
        IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId);

        emit NFTWithdrawn(msg.sender, nftContract, tokenId);
    }

    // ‚úÖ L·∫•y danh s√°ch NFT user ƒë√£ n·∫°p cho m·ªôt lo·∫°i NFT c·ª• th·ªÉ
    function getUserNFTs(address user, address nftContract) external view returns (uint256[] memory) {
        return userNFTs[user][nftContract];
    }

    // ‚úÖ Ki·ªÉm tra user c√≥ s·ªü h·ªØu m·ªôt NFT c·ª• th·ªÉ kh√¥ng
    function hasUserNFT(address user, address nftContract, uint256 tokenId) external view returns (bool) {
        return _isNFTDeposited(user, nftContract, tokenId);
    }

    // üìå Ki·ªÉm tra NFT c√≥ ƒë∆∞·ª£c g·ª≠i v√†o contract kh√¥ng
    function _isNFTDeposited(address user, address nftContract, uint256 tokenId) internal view returns (bool) {
        uint256[] memory tokens = userNFTs[user][nftContract];
        for (uint256 i = 0; i < tokens.length; i++) {
            if (tokens[i] == tokenId) {
                return true;
            }
        }
        return false;
    }

    // üìå X√≥a NFT kh·ªèi danh s√°ch khi r√∫t ra
    function _removeNFT(address user, address nftContract, uint256 tokenId) internal {
        uint256[] storage tokens = userNFTs[user][nftContract];
        for (uint256 i = 0; i < tokens.length; i++) {
            if (tokens[i] == tokenId) {
                tokens[i] = tokens[tokens.length - 1]; // Swap v·ªõi ph·∫ßn t·ª≠ cu·ªëi
                tokens.pop();
                break;
            }
        }
    }

    // ================== EVENTS ==================

    event TokenDeposited(address indexed user, address indexed token, uint256 amount);
    event TokenWithdrawn(address indexed user, address indexed token, uint256 amount);
    event NFTDeposited(address indexed user, address indexed nftContract, uint256 tokenId);
    event NFTWithdrawn(address indexed user, address indexed nftContract, uint256 tokenId);
}
